"""
Quality control for brain + SC extraction and registration preprocessing step.
See `preprocess_data.sh` for the preprocessing pipeline.
"""

import argparse
import os
from tqdm import tqdm
import imageio

import pandas as pd
import nibabel as nib
import numpy as np

# Argument parsing
parser = argparse.ArgumentParser(description='Quality control for brain + SC extraction and registration.')
parser.add_argument('-d', '--data_path', type=str, required=True,
                    help='Path to the raw BIDS folder, i.e. before any preprocessing.')
parser.add_argument('-o', '--sct_output_path', type=str, required=True,
                    help='Path to the folder generated by `sct_run_batch`. This folder should contain `data_processed` and `qc` folders.')
parser.add_argument('-m', '--mask_fname', type=str, default='brain_cord_mask.nii.gz',
                    help='The name of the final mask as produced by the preprocessing step.')
args = parser.parse_args()

# Quick checking of arguments
if not os.path.exists(args.data_path):
    raise NotADirectoryError('%s could NOT be found!' % args.data_path)

if not os.path.exists(args.sct_output_path):
    raise NotADirectoryError('%s could NOT be found!' % args.data_path)
else:
    if not os.path.exists(os.path.join(args.sct_output_path, 'data_processed')):
        raise NotADirectoryError('`data_processed` could NOT be found within %s' % args.sct_output_path)
    if not os.path.exists(os.path.join(args.sct_output_path, 'qc')):
        raise NotADirectoryError('`qc` could NOT be found within %s' % args.sct_output_path)

# Get all subjects
subjects_df = pd.read_csv(os.path.join(args.data_path, 'participants.tsv'), sep='\t')
subjects = subjects_df['participant_id'].values.tolist()
problematic_subjects = []

# Perform QC for each subject
for subject in tqdm(subjects, desc='Iterating over Subjects'):
    # Get paths
    processed_subject_path = os.path.join(args.sct_output_path, 'data_processed', subject)
    subject_labels_path = os.path.join(args.data_path, 'derivatives', 'labels', subject, 'ses-02', 'anat')

    if not os.path.exists(processed_subject_path):
        print('Could not find processed data for subject: %s' % subject)
        problematic_subjects.append(subject)
        continue

    # (1) Check if the brain + SC mask leaves out any lesions or not (in GTs)
    mask_fpath = os.path.join(processed_subject_path, args.mask_fname)
    if not os.path.exists(mask_fpath):
        print('Could not find mask for subject: %s' % subject)
        problematic_subjects.append(subject)
        continue

    mask = nib.load(mask_fpath)

    # Compare to GT from each and every expert
    # NOTE: Since the final GT is majority-voting, we need to check each expert's GT
    for expert_id in range(1, 5):
        gt_fpath = os.path.join(subject_labels_path, "%s_ses-02_FLAIR_lesion-manual-rater%d.nii.gz" % (subject, expert_id))
        gt = nib.load(gt_fpath)

        # Compute difference between the brain + SC mask and GT
        diff = np.ones_like(mask.get_fdata())
        diff[np.where(mask.get_fdata())] = 0
        crop = diff * gt.get_fdata()
        is_gt_cropped = np.any(crop)

        if is_gt_cropped:
            print("\n\tALERT: Lesion(s) from expert %d cropped during preprocessing for subject: %s." % (expert_id, subject))
            print("\tNumber of Pixels Cropped: %d" % np.count_nonzero(crop))
            problematic_subjects.append(subject)

    # (2) Create visualizations for QC on i) brain + SC extraction and ii) registration
    ses01_fpath = os.path.join(processed_subject_path, 'ses-01', 'anat', 'sub-013_ses-01_FLAIR.nii.gz')
    ses01_reg_fpath = os.path.join(processed_subject_path, '%s_ses-01_FLAIR_reg-brain.nii.gz' % subject)
    ses02_fpath = os.path.join(processed_subject_path, 'ses-02', 'anat', 'sub-013_ses-02_FLAIR.nii.gz')

    qc_subject_path = os.path.join(args.sct_output_path, 'qc', subject)
    if not os.path.exists(qc_subject_path):
        os.makedirs(qc_subject_path)

    ses01_viz_fpath = os.path.join(qc_subject_path, 'ses01_FLAIR_masked.png')
    ses01_reg_viz_fpath = os.path.join(qc_subject_path, 'ses01_reg_FLAIR_masked.png')
    ses02_viz_fpath = os.path.join(qc_subject_path, 'ses02_FLAIR_masked.png')
    ses01_to_ses02_viz_fpath = os.path.join(qc_subject_path, 'ses01_to_ses02.gif')
    ses01_reg_to_ses02_viz_fpath = os.path.join(qc_subject_path, 'ses01_reg_to_ses02.gif')

    os.system('fsleyes render -of %s %s -dr 0 600 %s -dr 0 1 -a 30 -cm red' % (ses01_viz_fpath, ses01_fpath, mask_fpath))
    os.system('fsleyes render -of %s %s -dr 0 600 %s -dr 0 1 -a 30 -cm red' % (ses01_reg_viz_fpath, ses01_reg_fpath, mask_fpath))
    os.system('fsleyes render -of %s %s -dr 0 600 %s -dr 0 1 -a 30 -cm red' % (ses02_viz_fpath, ses02_fpath, mask_fpath))

    imageio.mimsave(ses01_to_ses02_viz_fpath, [imageio.imread(f) for f in (ses01_viz_fpath, ses02_viz_fpath)], duration=0.5)
    imageio.mimsave(ses01_reg_to_ses02_viz_fpath, [imageio.imread(f) for f in (ses01_reg_viz_fpath, ses02_viz_fpath)], duration=0.5)

if not problematic_subjects == []:
    print("\tALERT: Problematic Subjects Found: %s" % list(set(problematic_subjects)))
